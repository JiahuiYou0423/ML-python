# -*- coding: utf-8 -*-
"""data_processing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Qzv2joW0Sy-xueujkaOuNM8GDRe3kSdx

Importing the libraries
"""

import numpy as np
import pandas as pd
import matplotlib as plt

"""Importing the data"""

dataset=pd.read_csv('Data.csv')
x = dataset.iloc[:,:-1].values
y = dataset.iloc[:, -1].values
print(x)
print(y)

"""Taking care of missing data"""

#replace the missing data with the average data of that column
from sklearn.impute import SimpleImputer
imputer = SimpleImputer(missing_values=np.nan, strategy='mean')
imputer.fit(x[:, 1:3])  #fit calculate the mean value
x[:, 1:3]=imputer.transform(x[:, 1:3]) # transfer fit the missing value with the computed value 
print(x)

"""Encoding categorical data"""

#turn string into values
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [0])], remainder='passthrough') #which column to change into encode
x=ct.fit_transform(x)
print(x)

"""encoding the dependent variable"""

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder() #only dependent variable to encode
y=le.fit_transform(y)
print(y)

"""Splitting the dataset into the training set and test set """

#feathre scaling after spliting 
#test case should not work with the training case (information leakage on test set)
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test=train_test_split(x, y, train_size=0.8, random_state=1)
print(x_train)

"""Feature scaling """

#do we have feature scaling to dummy variable
#no, all the value feature in the same range, dummy variable has already changed in to 0-1
from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
x_train[:, 3:] = sc.fit_transform(x_train[:, 3:])  #fit calculate mean and transform the value
x_test[:, 3:] = sc.fit_transform(x_test[:, 3:])
print(x_train)