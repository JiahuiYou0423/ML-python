# -*- coding: utf-8 -*-
"""multipleRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/106OkSi7wnrqhoAb--Ma9EuNYYQdeBkPD

Importing the libraries
"""

import numpy as np
import pandas as pd
import matplotlib as plt

"""Importing the data"""

dataset=pd.read_csv("50_Startups.csv")
x=dataset.iloc[:, :-1].values
y=dataset.iloc[:, -1].values
print(x)

"""encoding the categorical data"""

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [3])], remainder='passthrough')
x= np.array(ct.fit_transform(x))
print(x)

"""Spliting the dataset into the training set and test set"""

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test= train_test_split(x, y, train_size=0.8, random_state=0)

"""Training the multilinear regression model on the training data"""

from sklearn.linear_model import LinearRegression
#class can avoid dummy variable trapping
#class can find the feature with the highest P-value
regressor = LinearRegression()
regressor.fit(x_train, y_train)

"""Predicting the test set results """

#plot vector real profit in test set
#plot predict profit in the test set
#compare 
y_print = regressor.predict(x_test)
np.set_printoptions(precision=2)  #set how floating point number are displayed
print(np.concatenate((y_print.reshape(len(y_print),1), y_test.reshape(len(y_print),1)),1))  #first parameter should be a tuple, reshape can make the horizontal array vertical, define 1 or 0 to decide concatenate direction